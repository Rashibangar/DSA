class Main{
    static class TreeNode{
        int data;
        TreeNode left,right;
        TreeNode(int value){
            data=value;
            left=right=null;
        }
        public static int height(TreeNode root){
            if(root==null) return 0;
            int leftHeight=height(root.left);
            int rightHeight=height(root.right);
            return Math.max(leftHeight,rightHeight) + 1;
        }
        public static void traverseInOrder(TreeNode root){
            if(root==null) return;
            traverseInOrder(root.left);
            System.out.print(root.data + " ");
            traverseInOrder(root.right);
        }
        public static int count(TreeNode root){
            if(root==null) return 0;
            return count(root.left)+count(root.right)+1;
        }
        public static boolean search(TreeNode root,int k){
            if(root==null) return false;
            if(root.data==k) return true;
            return search(root.left,k) || search(root.right,k);
        }
        public static void printLevel(TreeNode root,int k){
            if(root==null) return;
            if(k==1){
                System.out.println(root.data+" ");
            }else{
                printLevel(root.left, k-1);
                printLevel(root.right, k-1);
            }
        }
        public static int findMax(TreeNode root){
            if(root==null) return Integer.MIN_VALUE;
            int leftmax=findMax(root.left);
            int rightmax=findMax(root.right);
            return Math.max(root.data,(Math.max(leftmax,rightmax)));
        }
        public static int countLeaves(TreeNode root){
            if(root==null) return 0;
            if(root.left==null && root.right==null) return 1;
            return countLeaves(root.left) + countLeaves(root.right);
        }
        public static int countNodes(TreeNode root){
            if(root==null) return 0;
            return countNodes(root.left)+countNodes(root.right)+ root.data;
        }

        public static void traversalPostOrder(TreeNode root){
            if(root==null) return;
            traversalPostOrder(root.left);
            traversalPostOrder(root.right);
            System.out.print(root.data+" ");
        }
        public static boolean insertNode(TreeNode root, int k){
            if(root==null)return false;

            if(root.left==null){
                root.left = new TreeNode(k);
                return true;
            }
            if(root.right==null){
                root.right = new TreeNode(k);
                return true;
            }
            if(insertNode(root.left,k)) return true;

            return insertNode(root.right,k);
        }
        public static void print(TreeNode root){
            if(root==null)return;
            System.out.print(root.data+" ");
            print(root.left);
            print(root.right);
        }
        public static void main(String[] args) {
            TreeNode root = new TreeNode(1);
            root.left = new TreeNode(2);
            root.right = new TreeNode(3);
            root.left.left = new TreeNode(4);
            root.left.right = new TreeNode(5);
            root.right.left = new TreeNode(6);
            root.right.right = new TreeNode(7);
            root.left.left.left = new TreeNode(8);
            root.left.left.right = new TreeNode(9);
            root.left.right.left = new TreeNode(10);
            root.right.left.left = new TreeNode(11);
            root.right.left.right = new TreeNode(12);
            root.left.right.right = new TreeNode(13);
            root.right.right.left = new TreeNode(14);
            root.right.right.right = new TreeNode(15);
            System.out.println("Height of the Tree is : "  + height(root));
            System.out.println("Inorder Traversal of tree is : ");
            traverseInOrder(root);
            System.out.println();
            System.out.println("Tree Node : " + TreeNode.count(root));
            System.out.println("Is 2 is present = " + search(root,2));
            System.out.println(("Is 17 is present = " + search(root,17)));
            System.out.println("Nodes at level 2 : ");
            printLevel(root,2);
            System.out.println("Maximum Value is : " + findMax(root));
            System.out.println("Number of Leaves : " + countLeaves(root));
            System.out.println("Sum of Tree Nodes : " + TreeNode.countNodes(root));
            System.out.print("Post Order Traversal is : ");
            traversalPostOrder(root);
            System.out.println();
            System.out.println("Inserted Node is : " + insertNode(root,16));
            System.out.println("Full Binary Tree is : ");
            print(root);
        }
    }
}
